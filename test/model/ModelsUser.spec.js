/*
 * Ahana API
 * Ahana Web Server API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ahana@karngyan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AhanaApi);
  }
}(this, function(expect, AhanaApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsUser', function() {
      beforeEach(function() {
        instance = new AhanaApi.ModelsUser();
      });

      it('should create an instance of ModelsUser', function() {
        // TODO: update the code to test ModelsUser
        expect(instance).to.be.a(AhanaApi.ModelsUser);
      });

      it('should have the property apiKey (base name: "apiKey")', function() {
        // TODO: update the code to test the property apiKey
        expect(instance).to.have.property('apiKey');
        // expect(instance.apiKey).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property emailNotificationEnabled (base name: "emailNotificationEnabled")', function() {
        // TODO: update the code to test the property emailNotificationEnabled
        expect(instance).to.have.property('emailNotificationEnabled');
        // expect(instance.emailNotificationEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property firebaseUID (base name: "firebaseUID")', function() {
        // TODO: update the code to test the property firebaseUID
        expect(instance).to.have.property('firebaseUID');
        // expect(instance.firebaseUID).to.be(expectedValueLiteral);
      });

      it('should have the property handle (base name: "handle")', function() {
        // TODO: update the code to test the property handle
        expect(instance).to.have.property('handle');
        // expect(instance.handle).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property isLocked (base name: "isLocked")', function() {
        // TODO: update the code to test the property isLocked
        expect(instance).to.have.property('isLocked');
        // expect(instance.isLocked).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property phoneNumber (base name: "phoneNumber")', function() {
        // TODO: update the code to test the property phoneNumber
        expect(instance).to.have.property('phoneNumber');
        // expect(instance.phoneNumber).to.be(expectedValueLiteral);
      });

      it('should have the property rating (base name: "rating")', function() {
        // TODO: update the code to test the property rating
        expect(instance).to.have.property('rating');
        // expect(instance.rating).to.be(expectedValueLiteral);
      });

      it('should have the property signUpMode (base name: "signUpMode")', function() {
        // TODO: update the code to test the property signUpMode
        expect(instance).to.have.property('signUpMode');
        // expect(instance.signUpMode).to.be(expectedValueLiteral);
      });

      it('should have the property tSize (base name: "tSize")', function() {
        // TODO: update the code to test the property tSize
        expect(instance).to.have.property('tSize');
        // expect(instance.tSize).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

    });
  });

}));
