/*
 * Ahana API
 * Ahana Web Server API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ahana@karngyan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AhanaApi);
  }
}(this, function(expect, AhanaApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsMcqProblem', function() {
      beforeEach(function() {
        instance = new AhanaApi.ModelsMcqProblem();
      });

      it('should create an instance of ModelsMcqProblem', function() {
        // TODO: update the code to test ModelsMcqProblem
        expect(instance).to.be.a(AhanaApi.ModelsMcqProblem);
      });

      it('should have the property contest (base name: "contest")', function() {
        // TODO: update the code to test the property contest
        expect(instance).to.have.property('contest');
        // expect(instance.contest).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property optionFour (base name: "optionFour")', function() {
        // TODO: update the code to test the property optionFour
        expect(instance).to.have.property('optionFour');
        // expect(instance.optionFour).to.be(expectedValueLiteral);
      });

      it('should have the property optionOne (base name: "optionOne")', function() {
        // TODO: update the code to test the property optionOne
        expect(instance).to.have.property('optionOne');
        // expect(instance.optionOne).to.be(expectedValueLiteral);
      });

      it('should have the property optionThree (base name: "optionThree")', function() {
        // TODO: update the code to test the property optionThree
        expect(instance).to.have.property('optionThree');
        // expect(instance.optionThree).to.be(expectedValueLiteral);
      });

      it('should have the property optionTwo (base name: "optionTwo")', function() {
        // TODO: update the code to test the property optionTwo
        expect(instance).to.have.property('optionTwo');
        // expect(instance.optionTwo).to.be(expectedValueLiteral);
      });

      it('should have the property statement (base name: "statement")', function() {
        // TODO: update the code to test the property statement
        expect(instance).to.have.property('statement');
        // expect(instance.statement).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

    });
  });

}));
