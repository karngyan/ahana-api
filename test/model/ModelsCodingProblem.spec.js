/**
 * Ahana API
 * Ahana Web Server API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ahana@karngyan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AhanaApi);
  }
}(this, function(expect, AhanaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AhanaApi.ModelsCodingProblem();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModelsCodingProblem', function() {
    it('should create an instance of ModelsCodingProblem', function() {
      // uncomment below and update the code to test ModelsCodingProblem
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be.a(AhanaApi.ModelsCodingProblem);
    });

    it('should have the property constraints (base name: "constraints")', function() {
      // uncomment below and update the code to test the property constraints
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property contest (base name: "contest")', function() {
      // uncomment below and update the code to test the property contest
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property editorial (base name: "editorial")', function() {
      // uncomment below and update the code to test the property editorial
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property inputFormat (base name: "inputFormat")', function() {
      // uncomment below and update the code to test the property inputFormat
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property maxScore (base name: "maxScore")', function() {
      // uncomment below and update the code to test the property maxScore
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property outputFormat (base name: "outputFormat")', function() {
      // uncomment below and update the code to test the property outputFormat
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property sampleExplanation (base name: "sampleExplanation")', function() {
      // uncomment below and update the code to test the property sampleExplanation
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property sampleInput (base name: "sampleInput")', function() {
      // uncomment below and update the code to test the property sampleInput
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property sampleOutput (base name: "sampleOutput")', function() {
      // uncomment below and update the code to test the property sampleOutput
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property statement (base name: "statement")', function() {
      // uncomment below and update the code to test the property statement
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instane = new AhanaApi.ModelsCodingProblem();
      //expect(instance).to.be();
    });

  });

}));
