/*
 * Ahana API
 * Ahana Web Server API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ahana@karngyan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AhanaApi);
  }
}(this, function(expect, AhanaApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsCodingProblem', function() {
      beforeEach(function() {
        instance = new AhanaApi.ModelsCodingProblem();
      });

      it('should create an instance of ModelsCodingProblem', function() {
        // TODO: update the code to test ModelsCodingProblem
        expect(instance).to.be.a(AhanaApi.ModelsCodingProblem);
      });

      it('should have the property constraints (base name: "constraints")', function() {
        // TODO: update the code to test the property constraints
        expect(instance).to.have.property('constraints');
        // expect(instance.constraints).to.be(expectedValueLiteral);
      });

      it('should have the property contest (base name: "contest")', function() {
        // TODO: update the code to test the property contest
        expect(instance).to.have.property('contest');
        // expect(instance.contest).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property editorial (base name: "editorial")', function() {
        // TODO: update the code to test the property editorial
        expect(instance).to.have.property('editorial');
        // expect(instance.editorial).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property inputFormat (base name: "inputFormat")', function() {
        // TODO: update the code to test the property inputFormat
        expect(instance).to.have.property('inputFormat');
        // expect(instance.inputFormat).to.be(expectedValueLiteral);
      });

      it('should have the property maxScore (base name: "maxScore")', function() {
        // TODO: update the code to test the property maxScore
        expect(instance).to.have.property('maxScore');
        // expect(instance.maxScore).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property outputFormat (base name: "outputFormat")', function() {
        // TODO: update the code to test the property outputFormat
        expect(instance).to.have.property('outputFormat');
        // expect(instance.outputFormat).to.be(expectedValueLiteral);
      });

      it('should have the property sampleExplanation (base name: "sampleExplanation")', function() {
        // TODO: update the code to test the property sampleExplanation
        expect(instance).to.have.property('sampleExplanation');
        // expect(instance.sampleExplanation).to.be(expectedValueLiteral);
      });

      it('should have the property sampleInput (base name: "sampleInput")', function() {
        // TODO: update the code to test the property sampleInput
        expect(instance).to.have.property('sampleInput');
        // expect(instance.sampleInput).to.be(expectedValueLiteral);
      });

      it('should have the property sampleOutput (base name: "sampleOutput")', function() {
        // TODO: update the code to test the property sampleOutput
        expect(instance).to.have.property('sampleOutput');
        // expect(instance.sampleOutput).to.be(expectedValueLiteral);
      });

      it('should have the property statement (base name: "statement")', function() {
        // TODO: update the code to test the property statement
        expect(instance).to.have.property('statement');
        // expect(instance.statement).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

    });
  });

}));
