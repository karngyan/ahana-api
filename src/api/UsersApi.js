/**
 * Ahana API
 * Ahana Web Server API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ahana@karngyan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ModelsEUser from '../model/ModelsEUser';
import ModelsUser from '../model/ModelsUser';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the userControllerCreateUser operation.
     * @callback module:api/UsersApi~userControllerCreateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create New User
     * @param {module:api/UsersApi~userControllerCreateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsUser}
     */
    userControllerCreateUser(body, xToken, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsUser;

      return this.apiClient.callApi(
        '/users/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userControllerGetUser operation.
     * @callback module:api/UsersApi~userControllerGetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Existing User
     * @param {module:api/UsersApi~userControllerGetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsUser}
     */
    userControllerGetUser(xToken, firebaseUid, callback) {
      let postBody = null;

      let pathParams = {
        'firebaseUid': firebaseUid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsUser;

      return this.apiClient.callApi(
        '/users/{firebaseUid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
