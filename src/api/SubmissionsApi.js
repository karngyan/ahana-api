/**
 * Ahana API
 * Ahana Web Server API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mail@karngyan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ModelsSubmission from '../model/ModelsSubmission';
import ModelsSubmissionResponse from '../model/ModelsSubmissionResponse';

/**
* Submissions service.
* @module api/SubmissionsApi
* @version 1.0.0
*/
export default class SubmissionsApi {

    /**
    * Constructs a new SubmissionsApi. 
    * @alias module:api/SubmissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the submissionControllerGetSubmission operation.
     * @callback module:api/SubmissionsApi~submissionControllerGetSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Submission by id
     * @param {module:api/SubmissionsApi~submissionControllerGetSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsSubmission}
     */
    submissionControllerGetSubmission(submissionId, callback) {
      let postBody = null;

      let pathParams = {
        'submissionId': submissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsSubmission;

      return this.apiClient.callApi(
        '/submissions/{submissionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submissionControllerSubmitCodeSolution operation.
     * @callback module:api/SubmissionsApi~submissionControllerSubmitCodeSolutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Output Submission - Checks if output file matches output
     * @param {module:api/SubmissionsApi~submissionControllerSubmitCodeSolutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsSubmissionResponse}
     */
    submissionControllerSubmitCodeSolution(sfile, cfile, xUserApiKey, contestId, problemId, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'contestId': contestId,
        'problemId': problemId
      };
      let headerParams = {
        'X-User-ApiKey': xUserApiKey
      };
      let formParams = {
        'sfile': sfile,
        'cfile': cfile
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelsSubmissionResponse;

      return this.apiClient.callApi(
        '/submissions/code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
