/*
 * Ahana API
 * Ahana Web Server API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ahana@karngyan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModelsASubmissionMcq'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ModelsASubmissionMcq'));
  } else {
    // Browser globals (root is window)
    if (!root.AhanaApi) {
      root.AhanaApi = {};
    }
    root.AhanaApi.SubmissionsMcqApi = factory(root.AhanaApi.ApiClient, root.AhanaApi.ModelsASubmissionMcq);
  }
}(this, function(ApiClient, ModelsASubmissionMcq) {
  'use strict';

  /**
   * SubmissionsMcq service.
   * @module api/SubmissionsMcqApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SubmissionsMcqApi. 
   * @alias module:api/SubmissionsMcqApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the mcqSubmissionControllerGetAllUserMcqSubmissionByContest operation.
     * @callback module:api/SubmissionsMcqApi~mcqSubmissionControllerGetAllUserMcqSubmissionByContestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsASubmissionMcq} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All User McqSubmissions By Contest Id
     * @param {String} xUserApiKey the User API Key
     * @param {Number} cid contest id
     * @param {module:api/SubmissionsMcqApi~mcqSubmissionControllerGetAllUserMcqSubmissionByContestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsASubmissionMcq}
     */
    this.mcqSubmissionControllerGetAllUserMcqSubmissionByContest = function(xUserApiKey, cid, callback) {
      var postBody = null;

      // verify the required parameter 'xUserApiKey' is set
      if (xUserApiKey === undefined || xUserApiKey === null) {
        throw new Error("Missing the required parameter 'xUserApiKey' when calling mcqSubmissionControllerGetAllUserMcqSubmissionByContest");
      }

      // verify the required parameter 'cid' is set
      if (cid === undefined || cid === null) {
        throw new Error("Missing the required parameter 'cid' when calling mcqSubmissionControllerGetAllUserMcqSubmissionByContest");
      }


      var pathParams = {
      };
      var queryParams = {
        'cid': cid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-User-ApiKey': xUserApiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelsASubmissionMcq;

      return this.apiClient.callApi(
        '/submissions-mcq/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mcqSubmissionControllerSubmitMcqProblems operation.
     * @callback module:api/SubmissionsMcqApi~mcqSubmissionControllerSubmitMcqProblemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsASubmissionMcq} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mcq Submission
     * @param {String} xUserApiKey User API Key
     * @param {Number} contestId contest id
     * @param {Object} opts Optional parameters
     * @param {module:model/ModelsASubmissionMcq} opts.body mcq submission request
     * @param {module:api/SubmissionsMcqApi~mcqSubmissionControllerSubmitMcqProblemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsASubmissionMcq}
     */
    this.mcqSubmissionControllerSubmitMcqProblems = function(xUserApiKey, contestId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'xUserApiKey' is set
      if (xUserApiKey === undefined || xUserApiKey === null) {
        throw new Error("Missing the required parameter 'xUserApiKey' when calling mcqSubmissionControllerSubmitMcqProblems");
      }

      // verify the required parameter 'contestId' is set
      if (contestId === undefined || contestId === null) {
        throw new Error("Missing the required parameter 'contestId' when calling mcqSubmissionControllerSubmitMcqProblems");
      }


      var pathParams = {
      };
      var queryParams = {
        'contestId': contestId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-User-ApiKey': xUserApiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelsASubmissionMcq;

      return this.apiClient.callApi(
        '/submissions-mcq/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
