/**
 * Ahana API
 * Ahana Web Server API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mail@karngyan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
* Problems service.
* @module api/ProblemsApi
* @version 1.0.0
*/
export default class ProblemsApi {

    /**
    * Constructs a new ProblemsApi. 
    * @alias module:api/ProblemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the problemControllerGetInputFileAndInitSubmissionDeadline operation.
     * @callback module:api/ProblemsApi~problemControllerGetInputFileAndInitSubmissionDeadlineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Input File and create a submission deadline for the user
     * @param {module:api/ProblemsApi~problemControllerGetInputFileAndInitSubmissionDeadlineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    problemControllerGetInputFileAndInitSubmissionDeadline(xUserApiKey, pid, callback) {
      let postBody = null;

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-User-ApiKey': xUserApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/problems/{pid}/input', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
