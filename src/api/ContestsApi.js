/*
 * Ahana API
 * Ahana Web Server API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ahana@karngyan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModelsContest', 'model/ModelsContestResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ModelsContest'), require('../model/ModelsContestResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.AhanaApi) {
      root.AhanaApi = {};
    }
    root.AhanaApi.ContestsApi = factory(root.AhanaApi.ApiClient, root.AhanaApi.ModelsContest, root.AhanaApi.ModelsContestResponse);
  }
}(this, function(ApiClient, ModelsContest, ModelsContestResponse) {
  'use strict';

  /**
   * Contests service.
   * @module api/ContestsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ContestsApi. 
   * @alias module:api/ContestsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the contestControllerGetContest operation.
     * @callback module:api/ContestsApi~contestControllerGetContestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsContestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Contest by id
     * @param {String} xUserApiKey User API Key
     * @param {Number} contestId the ContestId you want to get
     * @param {module:api/ContestsApi~contestControllerGetContestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsContestResponse}
     */
    this.contestControllerGetContest = function(xUserApiKey, contestId, callback) {
      var postBody = null;

      // verify the required parameter 'xUserApiKey' is set
      if (xUserApiKey === undefined || xUserApiKey === null) {
        throw new Error("Missing the required parameter 'xUserApiKey' when calling contestControllerGetContest");
      }

      // verify the required parameter 'contestId' is set
      if (contestId === undefined || contestId === null) {
        throw new Error("Missing the required parameter 'contestId' when calling contestControllerGetContest");
      }


      var pathParams = {
        'contestId': contestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-User-ApiKey': xUserApiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelsContestResponse;

      return this.apiClient.callApi(
        '/contests/{contestId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contestControllerGetContestsBySeries operation.
     * @callback module:api/ContestsApi~contestControllerGetContestsBySeriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsContest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Contests By Series Id
     * @param {Number} sid series id
     * @param {module:api/ContestsApi~contestControllerGetContestsBySeriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsContest>}
     */
    this.contestControllerGetContestsBySeries = function(sid, callback) {
      var postBody = null;

      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling contestControllerGetContestsBySeries");
      }


      var pathParams = {
      };
      var queryParams = {
        'sid': sid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ModelsContest];

      return this.apiClient.callApi(
        '/contests/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contestControllerRegisterForContest operation.
     * @callback module:api/ContestsApi~contestControllerRegisterForContestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register for an upcoming contest
     * @param {String} xUserApiKey User API Key
     * @param {Number} contestId the contest id you want to register for
     * @param {module:api/ContestsApi~contestControllerRegisterForContestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.contestControllerRegisterForContest = function(xUserApiKey, contestId, callback) {
      var postBody = null;

      // verify the required parameter 'xUserApiKey' is set
      if (xUserApiKey === undefined || xUserApiKey === null) {
        throw new Error("Missing the required parameter 'xUserApiKey' when calling contestControllerRegisterForContest");
      }

      // verify the required parameter 'contestId' is set
      if (contestId === undefined || contestId === null) {
        throw new Error("Missing the required parameter 'contestId' when calling contestControllerRegisterForContest");
      }


      var pathParams = {
        'contestId': contestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-User-ApiKey': xUserApiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contests/{contestId}/register', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
