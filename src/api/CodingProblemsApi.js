/*
 * Ahana API
 * Ahana Web Server API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ahana@karngyan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModelsCodingProblem', 'model/ModelsRSubmissionDeadline'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ModelsCodingProblem'), require('../model/ModelsRSubmissionDeadline'));
  } else {
    // Browser globals (root is window)
    if (!root.AhanaApi) {
      root.AhanaApi = {};
    }
    root.AhanaApi.CodingProblemsApi = factory(root.AhanaApi.ApiClient, root.AhanaApi.ModelsCodingProblem, root.AhanaApi.ModelsRSubmissionDeadline);
  }
}(this, function(ApiClient, ModelsCodingProblem, ModelsRSubmissionDeadline) {
  'use strict';

  /**
   * CodingProblems service.
   * @module api/CodingProblemsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CodingProblemsApi. 
   * @alias module:api/CodingProblemsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the codingProblemControllerDownloadInputFile operation.
     * @callback module:api/CodingProblemsApi~codingProblemControllerDownloadInputFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Input File only if the submission deadline for the user is on
     * @param {String} key key
     * @param {Number} pid the problem id you want to get
     * @param {module:api/CodingProblemsApi~codingProblemControllerDownloadInputFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.codingProblemControllerDownloadInputFile = function(key, pid, callback) {
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling codingProblemControllerDownloadInputFile");
      }

      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling codingProblemControllerDownloadInputFile");
      }


      var pathParams = {
      };
      var queryParams = {
        'key': key,
        'pid': pid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/coding-problems/in/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the codingProblemControllerGetCodingProblemById operation.
     * @callback module:api/CodingProblemsApi~codingProblemControllerGetCodingProblemByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCodingProblem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CodingProblem by Id
     * @param {Number} problemId the problemId you want to get
     * @param {module:api/CodingProblemsApi~codingProblemControllerGetCodingProblemByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCodingProblem}
     */
    this.codingProblemControllerGetCodingProblemById = function(problemId, callback) {
      var postBody = null;

      // verify the required parameter 'problemId' is set
      if (problemId === undefined || problemId === null) {
        throw new Error("Missing the required parameter 'problemId' when calling codingProblemControllerGetCodingProblemById");
      }


      var pathParams = {
        'problemId': problemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelsCodingProblem;

      return this.apiClient.callApi(
        '/coding-problems/{problemId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the codingProblemControllerGetCodingProblemsByContest operation.
     * @callback module:api/CodingProblemsApi~codingProblemControllerGetCodingProblemsByContestCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsCodingProblem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All CodingProblems By Contest Id
     * @param {Number} cid contest id
     * @param {module:api/CodingProblemsApi~codingProblemControllerGetCodingProblemsByContestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsCodingProblem>}
     */
    this.codingProblemControllerGetCodingProblemsByContest = function(cid, callback) {
      var postBody = null;

      // verify the required parameter 'cid' is set
      if (cid === undefined || cid === null) {
        throw new Error("Missing the required parameter 'cid' when calling codingProblemControllerGetCodingProblemsByContest");
      }


      var pathParams = {
      };
      var queryParams = {
        'cid': cid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ModelsCodingProblem];

      return this.apiClient.callApi(
        '/coding-problems/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the codingProblemControllerInitSubmissionDeadline operation.
     * @callback module:api/CodingProblemsApi~codingProblemControllerInitSubmissionDeadlineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsRSubmissionDeadline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Input File and create a submission deadline for the user
     * @param {String} xUserApiKey User API Key
     * @param {Number} pid the problem id you want to get
     * @param {module:api/CodingProblemsApi~codingProblemControllerInitSubmissionDeadlineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsRSubmissionDeadline}
     */
    this.codingProblemControllerInitSubmissionDeadline = function(xUserApiKey, pid, callback) {
      var postBody = null;

      // verify the required parameter 'xUserApiKey' is set
      if (xUserApiKey === undefined || xUserApiKey === null) {
        throw new Error("Missing the required parameter 'xUserApiKey' when calling codingProblemControllerInitSubmissionDeadline");
      }

      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling codingProblemControllerInitSubmissionDeadline");
      }


      var pathParams = {
        'pid': pid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-User-ApiKey': xUserApiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelsRSubmissionDeadline;

      return this.apiClient.callApi(
        '/coding-problems/{pid}/init', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
